import { Block, BLOCKS, Document, Inline, INLINES, MARKS, Text } from '@contentful/rich-text-types';
import { Entry } from './contentful-data-types';
import * as renders from './renders';
import * as helpers from './helpers';
export { helpers, renders };
export { Document, BLOCKS, MARKS, INLINES };
export declare type EntryPlain<T = unknown> = Pick<Entry<T>, 'sys' | 'fields'>;
export declare type CommonNode = Text | Block | Inline;
export interface RenderNext {
    (nodes?: CommonNode[]): string;
}
export declare type MarkdownResult = {
    contentData?: Record<string, unknown>;
    content: string;
};
export declare type RichtextDocumentRender = {
    (document: Document, options?: Partial<Options>): MarkdownResult;
};
export declare type RichtextDocumentRenderEmbedded = {
    (document: Document, options?: Partial<Options>): MarkdownResult['content'];
};
export declare type RenderContext = {
    next: RenderNext;
    embedDocument: RichtextDocumentRenderEmbedded;
    options: Required<Options>;
    parent?: CommonNode;
    index?: number;
    contentData?: Record<string, unknown>;
    addContentData: (value: unknown, name: string) => string;
    combineContentData: (data: Record<string, unknown>) => void;
};
export interface NodeRenderer {
    (node: Block | Inline, context: RenderContext): string;
}
export declare type RenderEmbeddedModelContext = RenderContext & {
    contentDataPath: string;
};
export interface ModelRender<T = unknown> {
    (entry: EntryPlain<T>, context: RenderEmbeddedModelContext): string;
}
export interface RenderNode {
    fallback: NodeRenderer;
    [k: string]: NodeRenderer;
}
export declare type MarkRenderer = (text: string, parent: CommonNode) => string;
export interface RenderMark {
    [k: string]: MarkRenderer;
}
export interface RenderModels {
    [k: string]: ModelRender<any>;
    fallback: ModelRender<any>;
}
export interface ModelValidate {
    (entry: Partial<EntryPlain<any>>): boolean | string;
}
export interface OnModelInvalid {
    (entry: Partial<EntryPlain<any>>, reason: string): void;
}
export interface Options {
    /**
     * Node renderers
     */
    renderNode?: RenderNode;
    /**
     * Mark renderers
     */
    renderMark?: RenderMark;
    renderModels?: RenderModels;
    prependUrlProtocol?: boolean;
    contentDataName?: string;
    modelFallbackComponentName?: string;
    modelValidate?: ModelValidate;
    onModelInvalid?: OnModelInvalid;
}
export declare const documentToMarkdown: RichtextDocumentRender;
export declare function asModelRender<T = unknown>(fn: ModelRender<T>): ModelRender<T>;
export { validateEntry } from './validate-entry';
