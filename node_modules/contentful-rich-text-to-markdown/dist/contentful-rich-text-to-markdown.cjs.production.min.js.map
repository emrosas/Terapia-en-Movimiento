{"version":3,"file":"contentful-rich-text-to-markdown.cjs.production.min.js","sources":["../src/helpers.ts","../src/renders/block-heading.ts","../src/renders/block-use-child.ts","../src/renders/inline-hyperlink.ts","../src/renders/index.ts","../src/renders/marks.ts","../src/renders/block-paragraph.ts","../src/renders/block-embedded-entry.ts","../src/renders/block-embedded-asset.ts","../src/renders/block-list-item.ts","../src/renders/block-quote.ts","../src/renders/block-hr.ts","../src/renders/inline-entry-hyperlink.ts","../src/renders/inline-embedded-entry.ts","../src/renders/block-fallback.ts","../src/validate-entry.ts","../src/index.ts"],"sourcesContent":["export type AppendFunction = {\n  (value: string, index: number): string\n}\n\nexport function prependLines(content: string, append: string | AppendFunction): string {\n  return content\n    .split(/\\n/g)\n    .map((str, index) => {\n      const appendString = typeof append === 'string' ? append : append(str, index)\n      return `${appendString}${str}`\n    })\n    .join('\\n')\n}\n\ntype RegexMatchGroups<Keys extends string = ''> = Record<Keys, unknown>\n\nexport function extractRegExp<Groups extends string>(re: RegExp, str: string): [boolean, RegexMatchGroups<Groups>] {\n  re.lastIndex = 0\n  const result = re.exec(str)\n  if (result) {\n    return [true, (result.groups || {}) as RegexMatchGroups<Groups>]\n  }\n\n  return [false, {} as RegexMatchGroups<Groups>]\n}\n\nexport function extractRegExps<Groups extends string>(\n  regexes: Array<RegExp>,\n  str: string\n): [boolean, RegexMatchGroups<Groups>] {\n  for (const regex of regexes) {\n    const result = extractRegExp<Groups>(regex, str)\n    if (result[0]) return result\n  }\n\n  return [false, {} as RegexMatchGroups<Groups>]\n}\n\nexport function prependNotEmpty(content: string, prependContent: string): string {\n  if (!content) return content\n  return `${prependContent}${content}`\n}\n\nexport function prependUrlProtocol(url: string, protocol = 'https'): string {\n  if (url.startsWith('//')) return `${protocol}:${url}`\n  return url\n}\n","import { NodeRenderer } from '../index'\n\nexport const createRenderBlockHeading: (level: number) => NodeRenderer = level => {\n  return (_, { next }) => `\\n${'#'.repeat(level)} ${next()}\\n`\n}\n","import { NodeRenderer } from '../index'\n\nexport const renderBlockUseChild: NodeRenderer = (_, { next }) => next()\n","import { NodeRenderer } from '../index'\nimport { extractRegExps, prependUrlProtocol } from '../helpers'\nimport { Asset } from '../contentful-data-types'\n\nfunction renderLink(rawContent: string, link: string): string {\n  const [isMatch, groups] = extractRegExps<'title' | 'content'>(\n    [/^\\[(?<title>.+)](?<content>.*)$/, /^(?<content>.*)\\[(?<title>.+)]$/],\n    rawContent\n  )\n\n  if (!isMatch) {\n    return `[${rawContent}](${link})`\n  }\n\n  return `[${groups.content}](${link} \"${groups.title}\")`\n}\n\nexport const renderInlineHyperlink: NodeRenderer = (node, { next }) => {\n  const rawContent = String(next()).trim()\n  const link = node.data.uri\n\n  return renderLink(rawContent, link)\n}\n\nexport const renderInlineAssetHyperlink: NodeRenderer = (node, { next, options }) => {\n  const rawContent = String(next()).trim()\n  const asset = node.data.target as Asset\n  const link = options.prependUrlProtocol ? prependUrlProtocol(asset.fields.file.url) : asset.fields.file.url\n\n  return renderLink(rawContent, link)\n}\n","import { BLOCKS, INLINES, MARKS } from '@contentful/rich-text-types'\nimport { ModelRender, RenderMark, RenderNode } from '../index'\n\nimport { renderBlockFallback } from './block-fallback'\nimport { renderBlockEmbeddedEntry } from './block-embedded-entry'\nimport { renderBlockEmbeddedAsset } from './block-embedded-asset'\nimport { renderBlockParagraph } from './block-paragraph'\nimport { createRenderBlockHeading } from './block-heading'\nimport { renderBlockUseChild } from './block-use-child'\nimport { renderBlockListItem } from './block-list-item'\nimport { renderBlockHr } from './block-hr'\nimport { renderBlockQuote } from './block-quote'\nimport { renderInlineAssetHyperlink, renderInlineHyperlink } from './inline-hyperlink'\nimport { renderInlineEntryHyperlink } from './inline-entry-hyperlink'\nimport { renderInlineEmbeddedEntry } from './inline-embedded-entry'\n\nimport * as Marks from './marks'\n\nexport const marks: RenderMark = {\n  [MARKS.BOLD]: Marks.renderMarkBold,\n  [MARKS.ITALIC]: Marks.renderMarkItalic,\n  [MARKS.UNDERLINE]: Marks.renderMarkUnderline,\n  [MARKS.CODE]: Marks.renderMarkCode,\n}\n\nexport const blocks: RenderNode = {\n  [BLOCKS.PARAGRAPH]: renderBlockParagraph,\n  [BLOCKS.HEADING_1]: createRenderBlockHeading(1),\n  [BLOCKS.HEADING_2]: createRenderBlockHeading(2),\n  [BLOCKS.HEADING_3]: createRenderBlockHeading(3),\n  [BLOCKS.HEADING_4]: createRenderBlockHeading(4),\n  [BLOCKS.HEADING_5]: createRenderBlockHeading(5),\n  [BLOCKS.HEADING_6]: createRenderBlockHeading(6),\n  [BLOCKS.EMBEDDED_ENTRY]: renderBlockEmbeddedEntry,\n  [BLOCKS.EMBEDDED_ASSET]: renderBlockEmbeddedAsset,\n  [BLOCKS.UL_LIST]: renderBlockUseChild,\n  [BLOCKS.OL_LIST]: renderBlockUseChild,\n  [BLOCKS.LIST_ITEM]: renderBlockListItem,\n  [BLOCKS.QUOTE]: renderBlockQuote,\n  [BLOCKS.HR]: renderBlockHr,\n  [INLINES.ASSET_HYPERLINK]: renderInlineAssetHyperlink,\n  [INLINES.ENTRY_HYPERLINK]: renderInlineEntryHyperlink,\n  [INLINES.EMBEDDED_ENTRY]: renderInlineEmbeddedEntry,\n  [INLINES.HYPERLINK]: renderInlineHyperlink,\n  fallback: renderBlockFallback,\n}\n\nexport const modelRenderFallback: ModelRender<any> = (entry, context) => {\n  const { addContentData, contentDataPath, options } = context\n  const sysId = entry?.sys?.id || 'unknown'\n  const type = entry?.sys?.contentType?.sys?.id || 'unknown'\n  const tagName = options.modelFallbackComponentName\n  const fields = entry.fields\n\n  if (fields) {\n    const dataPath = addContentData(fields, contentDataPath)\n    return `<${tagName} type='${type}' sys-id='${sysId}' :fields='${dataPath}'></${tagName}>`\n  }\n\n  return `<${tagName} type='${type}' sys-id='${sysId}' :fields='{}'></${tagName}>`\n}\n","import { MarkRenderer } from '../index'\n\nconst renderMarkBold: MarkRenderer = text => `**${text}**`\nconst renderMarkItalic: MarkRenderer = text => `*${text}*`\nconst renderMarkUnderline: MarkRenderer = text => `<u>${text}</u>`\nconst renderMarkCode: MarkRenderer = text => `<code>${text}</code>`\n\nexport { renderMarkBold, renderMarkItalic, renderMarkUnderline, renderMarkCode }\n","import { NodeRenderer } from '../index'\n\nexport const renderBlockParagraph: NodeRenderer = (_, { next, parent }) => {\n  const childrenContent = next()\n\n  if (!childrenContent.length) return ''\n  if (parent) return `\\n${childrenContent}\\n`\n\n  return `\\n\\n${childrenContent}\\n\\n`\n}\n","import { EntryPlain, NodeRenderer, RenderEmbeddedModelContext, validateEntry } from '../index'\n\nexport const renderBlockEmbeddedEntry: NodeRenderer = (node, context) => {\n  const entry = node.data.target as EntryPlain\n  const entryId = entry?.sys?.id\n  const entryType = entry?.sys?.contentType?.sys?.id\n\n  const { options } = context\n  const validateResult = validateEntry(entry, context)\n\n  if (validateResult !== true) {\n    if (options.onModelInvalid) {\n      options.onModelInvalid(entry, validateResult || '')\n    }\n\n    return ''\n  }\n\n  let renderModel = context.options.renderModels[entryType]\n  if (!renderModel) {\n    if (!context.options.renderModels.fallback) {\n      throw new Error(`Embedded entry render not defined: type=${entryType} id=${entryId}`)\n    }\n\n    renderModel = context.options.renderModels.fallback\n  }\n\n  const renderContext: RenderEmbeddedModelContext = {\n    ...context,\n    get contentDataPath() {\n      return entryId\n    },\n  }\n  const data = renderModel(entry, renderContext)\n\n  return `\\n\\n${data.trim()}\\n\\n`\n}\n","import { NodeRenderer } from '../index'\nimport { Asset } from '../contentful-data-types'\nimport { prependUrlProtocol } from '../helpers'\n\nexport const renderBlockEmbeddedAsset: NodeRenderer = (node, { options }) => {\n  const asset = node.data.target as Asset\n\n  const url = options.prependUrlProtocol ? prependUrlProtocol(asset.fields.file.url) : asset.fields.file.url\n\n  return `\\n\\n![${asset.fields.title}](${url})\\n\\n`\n}\n","import { NodeRenderer } from '../index'\nimport { BLOCKS } from '@contentful/rich-text-types'\nimport { prependLines } from '../helpers'\n\nexport const renderBlockListItem: NodeRenderer = (_, { next, parent, index }) => {\n  const isOL = parent?.nodeType === BLOCKS.OL_LIST\n  const listChar = isOL ? `${(index || 0) + 1}.` : '-'\n  const child = next()\n\n  if (!child) return ''\n\n  const childPadding = prependLines(child, () => `    `).trim()\n\n  return `${listChar} ${childPadding}\\n`\n}\n","import { NodeRenderer } from '../index'\nimport { prependLines } from '../helpers'\n\nexport const renderBlockQuote: NodeRenderer = (node, { next }) => {\n  const child = next(node.content).trim()\n\n  return prependLines(child, '> ')\n}\n","import { NodeRenderer } from '../index'\n\nexport const renderBlockHr: NodeRenderer = () => '\\n\\n---\\n\\n'\n","import { EntryPlain, NodeRenderer } from '../index'\n\nexport const renderInlineEntryHyperlink: NodeRenderer = (node, { next }) => {\n  const entry = node.data.target as EntryPlain\n  const content = next()\n\n  return `<span data-node-type='${node.nodeType}' data-sys-id='${entry.sys.id}'>${content}</span>`\n}\n","import { EntryPlain, NodeRenderer } from '../index'\n\nexport const renderInlineEmbeddedEntry: NodeRenderer = node => {\n  const entry = node.data.target as EntryPlain\n\n  return `<span data-node-type='${node.nodeType}' data-sys-id='${entry.sys.id}'></span>`\n}\n","import { NodeRenderer } from '../index'\n\nexport const renderBlockFallback: NodeRenderer = node => {\n  return `\\n\\n<!-- Fallback: type=${node.nodeType} -->\\n\\n`\n}\n","import { EntryPlain, ModelValidate, RenderContext } from './index'\n\nexport const baseModelValidate: ModelValidate = entry => {\n  if (!entry) return 'entry is empty'\n  if (!entry?.sys?.contentType?.sys?.id) return 'cannot detect content type'\n  if (!Object.prototype.hasOwnProperty.call(entry, 'fields')) {\n    return 'fields is empty'\n  }\n\n  return true\n}\n\nexport function validateEntry(entry: EntryPlain, context: RenderContext): ReturnType<ModelValidate> {\n  const { options } = context\n  let validResult = baseModelValidate(entry)\n\n  if (validResult !== true) return validResult\n  if (options.modelValidate) {\n    validResult = options.modelValidate(entry)\n  }\n\n  return validResult\n}\n","import {\n  Block,\n  BLOCKS,\n  Document,\n  helpers as richTextHelpers,\n  Inline,\n  INLINES,\n  Mark,\n  MARKS,\n  Text,\n} from '@contentful/rich-text-types'\nimport { Entry } from './contentful-data-types'\n\nimport * as renders from './renders'\nimport * as helpers from './helpers'\n\nexport { helpers, renders }\nexport { Document, BLOCKS, MARKS, INLINES }\n\nexport type EntryPlain<T = unknown> = Pick<Entry<T>, 'sys' | 'fields'>\n\nexport type CommonNode = Text | Block | Inline\n\nexport interface RenderNext {\n  (nodes?: CommonNode[]): string\n}\n\nexport type MarkdownResult = {\n  contentData?: Record<string, unknown>\n  content: string\n}\nexport type RichtextDocumentRender = {\n  (document: Document, options?: Partial<Options>): MarkdownResult\n}\nexport type RichtextDocumentRenderEmbedded = {\n  (document: Document, options?: Partial<Options>): MarkdownResult['content']\n}\nexport type RenderContext = {\n  next: RenderNext\n  embedDocument: RichtextDocumentRenderEmbedded\n  options: Required<Options>\n  parent?: CommonNode\n  index?: number\n  contentData?: Record<string, unknown>\n  addContentData: (value: unknown, name: string) => string\n  combineContentData: (data: Record<string, unknown>) => void\n}\n\nexport interface NodeRenderer {\n  (node: Block | Inline, context: RenderContext): string\n}\n\nexport type RenderEmbeddedModelContext = RenderContext & {\n  contentDataPath: string\n}\n\nexport interface ModelRender<T = unknown> {\n  (entry: EntryPlain<T>, context: RenderEmbeddedModelContext): string\n}\n\nexport interface RenderNode {\n  fallback: NodeRenderer\n\n  [k: string]: NodeRenderer\n}\n\nexport type MarkRenderer = (text: string, parent: CommonNode) => string\n\nexport interface RenderMark {\n  [k: string]: MarkRenderer\n}\n\nexport interface RenderModels {\n  [k: string]: ModelRender<any>\n\n  fallback: ModelRender<any>\n}\n\nexport interface ModelValidate {\n  (entry: Partial<EntryPlain<any>>): boolean | string\n}\n\nexport interface OnModelInvalid {\n  (entry: Partial<EntryPlain<any>>, reason: string): void\n}\n\nexport interface Options {\n  /**\n   * Node renderers\n   */\n  renderNode?: RenderNode\n  /**\n   * Mark renderers\n   */\n  renderMark?: RenderMark\n\n  renderModels?: RenderModels\n\n  prependUrlProtocol?: boolean\n  contentDataName?: string\n  modelFallbackComponentName?: string\n  modelValidate?: ModelValidate\n  onModelInvalid?: OnModelInvalid\n}\n\nconst defaultOnModelOnValid: OnModelInvalid = (entry, reason) => {\n  const entryId = entry?.sys?.id || 'unknown'\n  const entryType = entry?.sys?.contentType?.sys?.id || 'unknown'\n  console.warn(`Entry is invalid: sysId=${entryId} type=${entryType} reason=${reason}`)\n}\nconst defaultOptions = {\n  contentDataName: 'contentData',\n  prependUrlProtocol: true,\n  modelFallbackComponentName: 'RichtextModel',\n  onModelInvalid: defaultOnModelOnValid,\n} as Required<Options>\n\nexport const documentToMarkdown: RichtextDocumentRender = (\n  richTextDocument,\n  options: Partial<Options> = {}\n): MarkdownResult => {\n  if (!richTextDocument || !richTextDocument.content) {\n    return {\n      content: '',\n    }\n  }\n\n  const finallyOptions: Required<Options> = {\n    ...defaultOptions,\n    ...options,\n    renderNode: {\n      ...renders.blocks,\n      ...options.renderNode,\n    },\n    renderMark: {\n      ...renders.marks,\n      ...options.renderMark,\n    },\n    renderModels: {\n      fallback: renders.modelRenderFallback,\n      ...(options.renderModels || {}),\n    },\n  }\n\n  const context: RenderContext = {\n    addContentData(value: unknown, name: string): string {\n      if (!context.contentData) {\n        context.contentData = {}\n      }\n\n      context.contentData[name] = value\n\n      return `${finallyOptions.contentDataName}.${name}`\n    },\n\n    combineContentData(data) {\n      Object.entries(data).forEach(([name, value]) => context.addContentData(value, name))\n    },\n\n    next: () => '',\n\n    embedDocument: (document, embedOptions) => {\n      const result = documentToMarkdown(document, { ...finallyOptions, ...(embedOptions || {}) })\n      if (result.contentData) {\n        context.combineContentData(result.contentData)\n      }\n      return result.content\n    },\n    options: finallyOptions,\n  }\n\n  let content = renderNodeList(richTextDocument.content, context)\n  content = content.replace(/^\\n{2,}/gm, '\\n')\n\n  if (context.contentData) {\n    return {\n      contentData: context.contentData,\n      content: content,\n    }\n  }\n\n  return {\n    content: content,\n  }\n}\n\nfunction renderNodeList(nodes: CommonNode[], context: RenderContext): string {\n  return nodes\n    .map<string>((node, index) => renderNode(node, { ...context, index }))\n    .join('')\n}\n\nfunction renderNode(node: CommonNode, context: RenderContext): string {\n  const { options } = context\n\n  // Render marks\n  if (richTextHelpers.isText(node)) {\n    const nodeValue = node.value\n\n    if (node.marks.length > 0) {\n      return node.marks.reduce((value: string, mark: Mark) => {\n        const markRender = options.renderMark[mark.type]\n\n        if (!markRender) return value\n\n        return markRender(value, node)\n      }, nodeValue)\n    }\n\n    return nodeValue\n  }\n\n  // Render nodes\n\n  const nextNode: RenderNext = nodes => renderNodeList(nodes || node.content, { ...context, parent: node })\n  const nodeType = node.nodeType\n  if (!nodeType) return ''\n\n  const nodeRenderer = options.renderNode[nodeType] || options.renderNode.fallback\n  if (!nodeRenderer) return ''\n\n  return nodeRenderer(node, { ...context, next: nextNode })\n}\n\nexport function asModelRender<T = unknown>(fn: ModelRender<T>): ModelRender<T> {\n  return fn\n}\nexport { validateEntry } from './validate-entry'\n"],"names":["prependLines","content","append","split","map","str","index","join","extractRegExp","re","lastIndex","result","exec","groups","extractRegExps","regexes","prependUrlProtocol","url","protocol","startsWith","prependContent","createRenderBlockHeading","level","_","next","repeat","renderBlockUseChild","renderLink","rawContent","link","title","marks","MARKS","BOLD","text","ITALIC","UNDERLINE","CODE","blocks","BLOCKS","PARAGRAPH","parent","childrenContent","length","HEADING_1","HEADING_2","HEADING_3","HEADING_4","HEADING_5","HEADING_6","EMBEDDED_ENTRY","node","context","entry","data","target","entryId","sys","_entry$sys","id","entryType","_entry$sys2","contentType","_entry$sys2$contentTy","_entry$sys2$contentTy2","options","validateResult","validateEntry","onModelInvalid","renderModel","renderModels","fallback","Error","trim","EMBEDDED_ASSET","asset","fields","file","UL_LIST","OL_LIST","LIST_ITEM","listChar","nodeType","child","QUOTE","HR","INLINES","ASSET_HYPERLINK","String","ENTRY_HYPERLINK","HYPERLINK","uri","modelRenderFallback","sysId","type","tagName","modelFallbackComponentName","addContentData","contentDataPath","validResult","_entry$sys$contentTyp","_entry$sys$contentTyp2","Object","prototype","hasOwnProperty","call","baseModelValidate","modelValidate","defaultOptions","contentDataName","reason","console","warn","fn","documentToMarkdown","richTextDocument","finallyOptions","renderNode","renders","renderMark","value","name","contentData","combineContentData","entries","forEach","embedDocument","document","embedOptions","renderNodeList","nodes","richTextHelpers","isText","nodeValue","reduce","mark","markRender","nodeRenderer","replace"],"mappings":"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"}