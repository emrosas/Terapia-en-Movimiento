'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var richTextTypes = require('@contentful/rich-text-types');

function _wrapRegExp() {
  _wrapRegExp = function (re, groups) {
    return new BabelRegExp(re, undefined, groups);
  };

  var _super = RegExp.prototype;

  var _groups = new WeakMap();

  function BabelRegExp(re, flags, groups) {
    var _this = new RegExp(re, flags);

    _groups.set(_this, groups || _groups.get(re));

    return _setPrototypeOf(_this, BabelRegExp.prototype);
  }

  _inherits(BabelRegExp, RegExp);

  BabelRegExp.prototype.exec = function (str) {
    var result = _super.exec.call(this, str);

    if (result) result.groups = buildGroups(result, this);
    return result;
  };

  BabelRegExp.prototype[Symbol.replace] = function (str, substitution) {
    if (typeof substitution === "string") {
      var groups = _groups.get(this);

      return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) {
        return "$" + groups[name];
      }));
    } else if (typeof substitution === "function") {
      var _this = this;

      return _super[Symbol.replace].call(this, str, function () {
        var args = arguments;

        if (typeof args[args.length - 1] !== "object") {
          args = [].slice.call(args);
          args.push(buildGroups(args, _this));
        }

        return substitution.apply(this, args);
      });
    } else {
      return _super[Symbol.replace].call(this, str, substitution);
    }
  };

  function buildGroups(result, re) {
    var g = _groups.get(re);

    return Object.keys(g).reduce(function (groups, name) {
      groups[name] = result[g[name]];
      return groups;
    }, Object.create(null));
  }

  return _wrapRegExp.apply(this, arguments);
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);

  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }

  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var renderBlockFallback = function renderBlockFallback(node) {
  return "\n\n<!-- Fallback: type=" + node.nodeType + " -->\n\n";
};

var renderBlockEmbeddedEntry = function renderBlockEmbeddedEntry(node, context) {
  var _entry$sys, _entry$sys2, _entry$sys2$contentTy, _entry$sys2$contentTy2;

  var entry = node.data.target;
  var entryId = entry == null ? void 0 : (_entry$sys = entry.sys) == null ? void 0 : _entry$sys.id;
  var entryType = entry == null ? void 0 : (_entry$sys2 = entry.sys) == null ? void 0 : (_entry$sys2$contentTy = _entry$sys2.contentType) == null ? void 0 : (_entry$sys2$contentTy2 = _entry$sys2$contentTy.sys) == null ? void 0 : _entry$sys2$contentTy2.id;
  var options = context.options;
  var validateResult = validateEntry(entry, context);

  if (validateResult !== true) {
    if (options.onModelInvalid) {
      options.onModelInvalid(entry, validateResult || '');
    }

    return '';
  }

  var renderModel = context.options.renderModels[entryType];

  if (!renderModel) {
    if (!context.options.renderModels.fallback) {
      throw new Error("Embedded entry render not defined: type=" + entryType + " id=" + entryId);
    }

    renderModel = context.options.renderModels.fallback;
  }

  var renderContext = _extends({}, context, {
    get contentDataPath() {
      return entryId;
    }

  });

  var data = renderModel(entry, renderContext);
  return "\n\n" + data.trim() + "\n\n";
};

function prependLines(content, append) {
  return content.split(/\n/g).map(function (str, index) {
    var appendString = typeof append === 'string' ? append : append(str, index);
    return "" + appendString + str;
  }).join('\n');
}
function extractRegExp(re, str) {
  re.lastIndex = 0;
  var result = re.exec(str);

  if (result) {
    return [true, result.groups || {}];
  }

  return [false, {}];
}
function extractRegExps(regexes, str) {
  for (var _iterator = _createForOfIteratorHelperLoose(regexes), _step; !(_step = _iterator()).done;) {
    var regex = _step.value;
    var result = extractRegExp(regex, str);
    if (result[0]) return result;
  }

  return [false, {}];
}
function prependNotEmpty(content, prependContent) {
  if (!content) return content;
  return "" + prependContent + content;
}
function prependUrlProtocol(url, protocol) {
  if (protocol === void 0) {
    protocol = 'https';
  }

  if (url.startsWith('//')) return protocol + ":" + url;
  return url;
}

var helpers = {
  __proto__: null,
  prependLines: prependLines,
  extractRegExp: extractRegExp,
  extractRegExps: extractRegExps,
  prependNotEmpty: prependNotEmpty,
  prependUrlProtocol: prependUrlProtocol
};

var renderBlockEmbeddedAsset = function renderBlockEmbeddedAsset(node, _ref) {
  var options = _ref.options;
  var asset = node.data.target;
  var url = options.prependUrlProtocol ? prependUrlProtocol(asset.fields.file.url) : asset.fields.file.url;
  return "\n\n![" + asset.fields.title + "](" + url + ")\n\n";
};

var renderBlockParagraph = function renderBlockParagraph(_, _ref) {
  var next = _ref.next,
      parent = _ref.parent;
  var childrenContent = next();
  if (!childrenContent.length) return '';
  if (parent) return "\n" + childrenContent + "\n";
  return "\n\n" + childrenContent + "\n\n";
};

var createRenderBlockHeading = function createRenderBlockHeading(level) {
  return function (_, _ref) {
    var next = _ref.next;
    return "\n" + '#'.repeat(level) + " " + next() + "\n";
  };
};

var renderBlockUseChild = function renderBlockUseChild(_, _ref) {
  var next = _ref.next;
  return next();
};

var renderBlockListItem = function renderBlockListItem(_, _ref) {
  var next = _ref.next,
      parent = _ref.parent,
      index = _ref.index;
  var isOL = (parent == null ? void 0 : parent.nodeType) === richTextTypes.BLOCKS.OL_LIST;
  var listChar = isOL ? (index || 0) + 1 + "." : '-';
  var child = next();
  if (!child) return '';
  var childPadding = prependLines(child, function () {
    return "    ";
  }).trim();
  return listChar + " " + childPadding + "\n";
};

var renderBlockHr = function renderBlockHr() {
  return '\n\n---\n\n';
};

var renderBlockQuote = function renderBlockQuote(node, _ref) {
  var next = _ref.next;
  var child = next(node.content).trim();
  return prependLines(child, '> ');
};

function renderLink(rawContent, link) {
  var _extractRegExps = extractRegExps([/*#__PURE__*/_wrapRegExp(/^\[(.+)\](.*)$/, {
    title: 1,
    content: 2
  }), /*#__PURE__*/_wrapRegExp(/^(.*)\[(.+)\]$/, {
    content: 1,
    title: 2
  })], rawContent),
      isMatch = _extractRegExps[0],
      groups = _extractRegExps[1];

  if (!isMatch) {
    return "[" + rawContent + "](" + link + ")";
  }

  return "[" + groups.content + "](" + link + " \"" + groups.title + "\")";
}

var renderInlineHyperlink = function renderInlineHyperlink(node, _ref) {
  var next = _ref.next;
  var rawContent = String(next()).trim();
  var link = node.data.uri;
  return renderLink(rawContent, link);
};
var renderInlineAssetHyperlink = function renderInlineAssetHyperlink(node, _ref2) {
  var next = _ref2.next,
      options = _ref2.options;
  var rawContent = String(next()).trim();
  var asset = node.data.target;
  var link = options.prependUrlProtocol ? prependUrlProtocol(asset.fields.file.url) : asset.fields.file.url;
  return renderLink(rawContent, link);
};

var renderInlineEntryHyperlink = function renderInlineEntryHyperlink(node, _ref) {
  var next = _ref.next;
  var entry = node.data.target;
  var content = next();
  return "<span data-node-type='" + node.nodeType + "' data-sys-id='" + entry.sys.id + "'>" + content + "</span>";
};

var renderInlineEmbeddedEntry = function renderInlineEmbeddedEntry(node) {
  var entry = node.data.target;
  return "<span data-node-type='" + node.nodeType + "' data-sys-id='" + entry.sys.id + "'></span>";
};

var renderMarkBold = function renderMarkBold(text) {
  return "**" + text + "**";
};

var renderMarkItalic = function renderMarkItalic(text) {
  return "*" + text + "*";
};

var renderMarkUnderline = function renderMarkUnderline(text) {
  return "<u>" + text + "</u>";
};

var renderMarkCode = function renderMarkCode(text) {
  return "<code>" + text + "</code>";
};

var _marks, _blocks;
var marks = (_marks = {}, _marks[richTextTypes.MARKS.BOLD] = renderMarkBold, _marks[richTextTypes.MARKS.ITALIC] = renderMarkItalic, _marks[richTextTypes.MARKS.UNDERLINE] = renderMarkUnderline, _marks[richTextTypes.MARKS.CODE] = renderMarkCode, _marks);
var blocks = (_blocks = {}, _blocks[richTextTypes.BLOCKS.PARAGRAPH] = renderBlockParagraph, _blocks[richTextTypes.BLOCKS.HEADING_1] = /*#__PURE__*/createRenderBlockHeading(1), _blocks[richTextTypes.BLOCKS.HEADING_2] = /*#__PURE__*/createRenderBlockHeading(2), _blocks[richTextTypes.BLOCKS.HEADING_3] = /*#__PURE__*/createRenderBlockHeading(3), _blocks[richTextTypes.BLOCKS.HEADING_4] = /*#__PURE__*/createRenderBlockHeading(4), _blocks[richTextTypes.BLOCKS.HEADING_5] = /*#__PURE__*/createRenderBlockHeading(5), _blocks[richTextTypes.BLOCKS.HEADING_6] = /*#__PURE__*/createRenderBlockHeading(6), _blocks[richTextTypes.BLOCKS.EMBEDDED_ENTRY] = renderBlockEmbeddedEntry, _blocks[richTextTypes.BLOCKS.EMBEDDED_ASSET] = renderBlockEmbeddedAsset, _blocks[richTextTypes.BLOCKS.UL_LIST] = renderBlockUseChild, _blocks[richTextTypes.BLOCKS.OL_LIST] = renderBlockUseChild, _blocks[richTextTypes.BLOCKS.LIST_ITEM] = renderBlockListItem, _blocks[richTextTypes.BLOCKS.QUOTE] = renderBlockQuote, _blocks[richTextTypes.BLOCKS.HR] = renderBlockHr, _blocks[richTextTypes.INLINES.ASSET_HYPERLINK] = renderInlineAssetHyperlink, _blocks[richTextTypes.INLINES.ENTRY_HYPERLINK] = renderInlineEntryHyperlink, _blocks[richTextTypes.INLINES.EMBEDDED_ENTRY] = renderInlineEmbeddedEntry, _blocks[richTextTypes.INLINES.HYPERLINK] = renderInlineHyperlink, _blocks.fallback = renderBlockFallback, _blocks);
var modelRenderFallback = function modelRenderFallback(entry, context) {
  var _entry$sys, _entry$sys2, _entry$sys2$contentTy, _entry$sys2$contentTy2;

  var addContentData = context.addContentData,
      contentDataPath = context.contentDataPath,
      options = context.options;
  var sysId = (entry == null ? void 0 : (_entry$sys = entry.sys) == null ? void 0 : _entry$sys.id) || 'unknown';
  var type = (entry == null ? void 0 : (_entry$sys2 = entry.sys) == null ? void 0 : (_entry$sys2$contentTy = _entry$sys2.contentType) == null ? void 0 : (_entry$sys2$contentTy2 = _entry$sys2$contentTy.sys) == null ? void 0 : _entry$sys2$contentTy2.id) || 'unknown';
  var tagName = options.modelFallbackComponentName;
  var fields = entry.fields;

  if (fields) {
    var dataPath = addContentData(fields, contentDataPath);
    return "<" + tagName + " type='" + type + "' sys-id='" + sysId + "' :fields='" + dataPath + "'></" + tagName + ">";
  }

  return "<" + tagName + " type='" + type + "' sys-id='" + sysId + "' :fields='{}'></" + tagName + ">";
};

var index = {
  __proto__: null,
  marks: marks,
  blocks: blocks,
  modelRenderFallback: modelRenderFallback
};

var baseModelValidate = function baseModelValidate(entry) {
  var _entry$sys, _entry$sys$contentTyp, _entry$sys$contentTyp2;

  if (!entry) return 'entry is empty';
  if (!(entry != null && (_entry$sys = entry.sys) != null && (_entry$sys$contentTyp = _entry$sys.contentType) != null && (_entry$sys$contentTyp2 = _entry$sys$contentTyp.sys) != null && _entry$sys$contentTyp2.id)) return 'cannot detect content type';

  if (!Object.prototype.hasOwnProperty.call(entry, 'fields')) {
    return 'fields is empty';
  }

  return true;
};
function validateEntry(entry, context) {
  var options = context.options;
  var validResult = baseModelValidate(entry);
  if (validResult !== true) return validResult;

  if (options.modelValidate) {
    validResult = options.modelValidate(entry);
  }

  return validResult;
}

var defaultOnModelOnValid = function defaultOnModelOnValid(entry, reason) {
  var _entry$sys, _entry$sys2, _entry$sys2$contentTy, _entry$sys2$contentTy2;

  var entryId = (entry == null ? void 0 : (_entry$sys = entry.sys) == null ? void 0 : _entry$sys.id) || 'unknown';
  var entryType = (entry == null ? void 0 : (_entry$sys2 = entry.sys) == null ? void 0 : (_entry$sys2$contentTy = _entry$sys2.contentType) == null ? void 0 : (_entry$sys2$contentTy2 = _entry$sys2$contentTy.sys) == null ? void 0 : _entry$sys2$contentTy2.id) || 'unknown';
  console.warn("Entry is invalid: sysId=" + entryId + " type=" + entryType + " reason=" + reason);
};

var defaultOptions = {
  contentDataName: 'contentData',
  prependUrlProtocol: true,
  modelFallbackComponentName: 'RichtextModel',
  onModelInvalid: defaultOnModelOnValid
};
var documentToMarkdown = function documentToMarkdown(richTextDocument, options) {
  if (options === void 0) {
    options = {};
  }

  if (!richTextDocument || !richTextDocument.content) {
    return {
      content: ''
    };
  }

  var finallyOptions = _extends({}, defaultOptions, options, {
    renderNode: _extends({}, blocks, options.renderNode),
    renderMark: _extends({}, marks, options.renderMark),
    renderModels: _extends({
      fallback: modelRenderFallback
    }, options.renderModels || {})
  });

  var context = {
    addContentData: function addContentData(value, name) {
      if (!context.contentData) {
        context.contentData = {};
      }

      context.contentData[name] = value;
      return finallyOptions.contentDataName + "." + name;
    },
    combineContentData: function combineContentData(data) {
      Object.entries(data).forEach(function (_ref) {
        var name = _ref[0],
            value = _ref[1];
        return context.addContentData(value, name);
      });
    },
    next: function next() {
      return '';
    },
    embedDocument: function embedDocument(document, embedOptions) {
      var result = documentToMarkdown(document, _extends({}, finallyOptions, embedOptions || {}));

      if (result.contentData) {
        context.combineContentData(result.contentData);
      }

      return result.content;
    },
    options: finallyOptions
  };
  var content = renderNodeList(richTextDocument.content, context);
  content = content.replace(/^\n{2,}/gm, '\n');

  if (context.contentData) {
    return {
      contentData: context.contentData,
      content: content
    };
  }

  return {
    content: content
  };
};

function renderNodeList(nodes, context) {
  return nodes.map(function (node, index) {
    return renderNode(node, _extends({}, context, {
      index: index
    }));
  }).join('');
}

function renderNode(node, context) {
  var options = context.options; // Render marks

  if (richTextTypes.helpers.isText(node)) {
    var nodeValue = node.value;

    if (node.marks.length > 0) {
      return node.marks.reduce(function (value, mark) {
        var markRender = options.renderMark[mark.type];
        if (!markRender) return value;
        return markRender(value, node);
      }, nodeValue);
    }

    return nodeValue;
  } // Render nodes


  var nextNode = function nextNode(nodes) {
    return renderNodeList(nodes || node.content, _extends({}, context, {
      parent: node
    }));
  };

  var nodeType = node.nodeType;
  if (!nodeType) return '';
  var nodeRenderer = options.renderNode[nodeType] || options.renderNode.fallback;
  if (!nodeRenderer) return '';
  return nodeRenderer(node, _extends({}, context, {
    next: nextNode
  }));
}

function asModelRender(fn) {
  return fn;
}

Object.defineProperty(exports, 'BLOCKS', {
  enumerable: true,
  get: function () {
    return richTextTypes.BLOCKS;
  }
});
Object.defineProperty(exports, 'INLINES', {
  enumerable: true,
  get: function () {
    return richTextTypes.INLINES;
  }
});
Object.defineProperty(exports, 'MARKS', {
  enumerable: true,
  get: function () {
    return richTextTypes.MARKS;
  }
});
exports.asModelRender = asModelRender;
exports.documentToMarkdown = documentToMarkdown;
exports.helpers = helpers;
exports.renders = index;
exports.validateEntry = validateEntry;
//# sourceMappingURL=contentful-rich-text-to-markdown.cjs.development.js.map
